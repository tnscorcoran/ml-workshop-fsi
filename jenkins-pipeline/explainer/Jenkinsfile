pipeline {
    agent {
        label "maven"
    }

    environment{
        def git_repo = 'https://github.com/masoodfaisal/ml-workshop.git'
        def git_branch = 'master'
        def project_name = 'customerchurnpredictoralibi'

    }

stages {


    stage('Checkout'){
        steps {
        sh """
                git clone ${git_repo}
            """
    }
    }

    stage('Download Model'){
    steps{
        sh """
            cd ml-workshop/seldon-container-alibi
            curl --fail -vvvk -o CustomerChurnPredictorAlibi.dill https://minio-ml-workshop-ml-workshop.apps.cluster-anz-ai-ml.rhtlabs.com/models/${experiment_id}/CustomerChurnPredictorAlibi.dill
            curl --fail -vvvk -o CustomerChurnOrdinalEncoder.pkl https://minio-ml-workshop-ml-workshop.apps.cluster-anz-ai-ml.rhtlabs.com/models/${experiment_id}/CustomerChurnOrdinalEncoder.pkl
            curl --fail -vvvk -o CustomerChurnOneHotEncoder.pkl https://minio-ml-workshop-ml-workshop.apps.cluster-anz-ai-ml.rhtlabs.com/models/${experiment_id}/CustomerChurnOneHotEncoder.pkl

            cd -
        """
    }
    }

    stage('Create Build'){
    steps{
        sh """
            oc project ${namespace}
            BUILD_STATUS=\$(oc get bc ${project_name}  --ignore-not-found=true  | awk '{if(NR>1) print \$1}')
            if [[ \${BUILD_STATUS} != ${project_name} ]]; then
                echo "Build not found. Creating ...."
                oc new-build --name=${project_name} --strategy=docker --binary=true
            fi
           """
    }
    }

    stage('Build Image'){
    steps{
        sh """
            oc project ${namespace}
            cd ml-workshop
            oc patch bc ${project_name} -p '{"spec": { "output": {"to": { "name": "${project_name}:${experiment_id}"}}}}'
            oc start-build ${project_name}  --from-dir=./seldon-container-alibi/. --follow --no-cache=true
           """
    }
    }

    stage('Deploy Model'){
    steps{
        sh """
            oc project ${namespace}
            cd ml-workshop
            sed -i 's/IMAGE_NAME/${namespace}\\/${project_name}:${experiment_id}/g' seldon-container-alibi/seldon-deployment-alibi.yaml
            sed -i 's/EXPERIMENT_ID/${experiment_id}/g' seldon-container-alibi/seldon-deployment-alibi.yaml
            oc apply -f seldon-container-alibi/seldon-deployment-alibi.yaml
            oc label SeldonDeployment alibi-model-${experiment_id} --overwrite=true  experiment_id=${experiment_id}
           """
    }
    }

    stage('Expose Model'){
    steps{
        sh """
            ROUTE_STATUTS=\$(oc get route a-${experiment_id}  --ignore-not-found=true  | awk '{if(NR>1) print \$1}')
            if [[ \${ROUTE_STATUTS} != ${experiment_id} ]]; then
                echo "Route not found. Creating ...."
                oc create route edge a-${experiment_id} --service=alibi-model-${experiment_id}-predictor-alibi --port=http
            else
                oc patch route a-${experiment_id}  -p '{"spec": { "to": {"name": "alibi-model-${experiment_id}-predictor-alibi"}}}'
            fi
            oc label route a-${experiment_id} --overwrite=true experiment_id=${experiment_id}
        """

    }
    }

}
}